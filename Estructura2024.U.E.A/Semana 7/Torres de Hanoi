using System;
using System.Collections.Generic;

public class TowerOfHanoi
{
    // Función recursiva para resolver el problema de las Torres de Hanoi
    public static void Solve(int n, Stack<int> source, Stack<int> auxiliary, Stack<int> target)
    {
        if (n > 0)
        {
            // Mover n-1 discos de la torre fuente a la torre auxiliar
            Solve(n - 1, source, target, auxiliary);
            
            // Mover el disco restante de la torre fuente a la torre destino
            target.Push(source.Pop());
            Console.WriteLine($"Mover disco {n} de {GetName(source)} a {GetName(target)}");

            // Mover n-1 discos de la torre auxiliar a la torre destino
            Solve(n - 1, auxiliary, source, target);
        }
    }

    // Función para obtener el nombre de la torre basado en la referencia de la pila
    private static string GetName(Stack<int> stack)
    {
        if (stack == A) return "A";
        if (stack == B) return "B";
        if (stack == C) return "C";
        return "Unknown";
    }

    // Definir las torres A, B y C como pilas globales
    private static Stack<int> A = new Stack<int>();
    private static Stack<int> B = new Stack<int>();
    private static Stack<int> C = new Stack<int>();

    public static void Main(string[] args)
    {
        int n = 3; // Número de discos

        // Inicializar la torre A con los discos
        for (int i = n; i >= 1; i--)
        {
            A.Push(i);
        }

        // Llamar a la función para resolver el problema de las Torres de Hanoi
        Solve(n, A, B, C);
    }
}
